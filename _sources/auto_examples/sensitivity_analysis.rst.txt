.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_sensitivity_analysis.py>` to download the full example code or to run this example in your browser via Binder
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_analysis.py:


Sensitivity Analysis in Python
==============================

This guide is organized in the following sections:

-  `**Sensitivity Analysis
   Theory** <#What-is-Sensitivity-Analysis%3F>`__
-  `**The Hard Way** <#How-to-Do-Sensitivity-Analysis-in-Python%3F>`__
-  `**The Easy Way (use
   ``sensitivity``)** <#Using-The-Sensitivity-Library>`__

What is Sensitivity Analysis?
-----------------------------

Sensitivity Analysis is the process of passing different inputs to a
model to see how the outputs change. It differs from Monte Carlo
Simulation in that no probability distributions are assigned to the
inputs, and typically larger ranges of the inputs are chosen. The
purpose of Sensitivity Analysis is to understand how the outputs change
over the full range of possible inputs. Sensitivity Analysis does not
derive any expected outcome or a probability distribution of outcomes,
instead returning a range of possible output values associated with each
set of inputs.

The general process for Sensitivity Analysis is as follows:

For the model given by:

.. math:: y = f(X)

.. math:: X = [x_1, x_2, ..., x_n]

Where:

-  :math:`y`: Model output
-  :math:`X`: Model input matrix
-  :math:`x_i` Value if :math:`i`\ th :math:`x` variable

Follow the following steps:

-  Choose a set of values for each :math:`x_i`
-  Take the cartesian product of these values as
   :math:`[X_1, X_2, ..., X_m]`
-  For each :math:`X_i`, calculate :math:`y_i = f(X_i)`
-  Store the values of :math:`X_i` mapped to :math:`y_i`
-  Visualize :math:`y_i` versus :math:`X_i`

How to Do Sensitivity Analysis in Python?
-----------------------------------------

Abstract algorithms are great, but let's see the code that can make this
happen. First we'll import pandas to use later and define a function
which represents the model:


.. code-block:: default


    import pandas as pd

    def my_model(x_1, x_2):
        """
        Represents f from above
        """
        return x_1 ** x_2









We can run this model once to get a single result:



.. code-block:: default


    y = my_model(2, 4)
    y






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    16



Now let's go step by step through the above algorithm. First let's
choose a set of values for each :math:`x_i`:



.. code-block:: default


    x1_values = [10, 20, 30]
    x2_values = [1, 2, 3]









While we can use ``itertools.product`` to take a cartesian product of an
arbitrary number of inputs, a more straightforward approach is to use
nested for loops. A for loop within a for loop will run with each
combination of the inputs.



.. code-block:: default


    for x1 in x1_values:
        for x2 in x2_values:
            print(x1, x2)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    10 1
    10 2
    10 3
    20 1
    20 2
    20 3
    30 1
    30 2
    30 3




Now we have each :math:`X_i`, we need to calculate :math:`y_i = f(X_i)`:



.. code-block:: default


    for x1 in x1_values:
        for x2 in x2_values:
            y_i = my_model(x1, x2)
            print(y_i)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    10
    100
    1000
    20
    400
    8000
    30
    900
    27000




Now store the values of :math:`X_i` mapped to :math:`y_i`:



.. code-block:: default


    outputs = []
    for x1 in x1_values:
        for x2 in x2_values:
            y_i = my_model(x1, x2)
            outputs.append((x1, x2, y_i))
    outputs






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(10, 1, 10), (10, 2, 100), (10, 3, 1000), (20, 1, 20), (20, 2, 400), (20, 3, 8000), (30, 1, 30), (30, 2, 900), (30, 3, 27000)]



Now the last is to visualize the result. We can do this with a table
format through a ``DataFrame``:



.. code-block:: default


    df = pd.DataFrame(outputs, columns=['x_1', 'x_2', 'y'])
    df







.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>x_1</th>
              <th>x_2</th>
              <th>y</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>10</td>
              <td>1</td>
              <td>10</td>
            </tr>
            <tr>
              <th>1</th>
              <td>10</td>
              <td>2</td>
              <td>100</td>
            </tr>
            <tr>
              <th>2</th>
              <td>10</td>
              <td>3</td>
              <td>1000</td>
            </tr>
            <tr>
              <th>3</th>
              <td>20</td>
              <td>1</td>
              <td>20</td>
            </tr>
            <tr>
              <th>4</th>
              <td>20</td>
              <td>2</td>
              <td>400</td>
            </tr>
            <tr>
              <th>5</th>
              <td>20</td>
              <td>3</td>
              <td>8000</td>
            </tr>
            <tr>
              <th>6</th>
              <td>30</td>
              <td>1</td>
              <td>30</td>
            </tr>
            <tr>
              <th>7</th>
              <td>30</td>
              <td>2</td>
              <td>900</td>
            </tr>
            <tr>
              <th>8</th>
              <td>30</td>
              <td>3</td>
              <td>27000</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

We can add some styling to the DataFrame to highlight the high and low
values:



.. code-block:: default


    df.style.background_gradient(subset='y', cmap='RdYlGn')







.. only:: builder_html

    .. raw:: html

        <style  type="text/css" >
            #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row0_col2 {
                    background-color:  #a50026;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row1_col2 {
                    background-color:  #a50026;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row2_col2 {
                    background-color:  #b71126;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row3_col2 {
                    background-color:  #a50026;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row4_col2 {
                    background-color:  #ab0626;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row5_col2 {
                    background-color:  #fcaa5f;
                    color:  #000000;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row6_col2 {
                    background-color:  #a50026;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row7_col2 {
                    background-color:  #b50f26;
                    color:  #f1f1f1;
                }    #T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row8_col2 {
                    background-color:  #006837;
                    color:  #f1f1f1;
                }</style><table id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >x_1</th>        <th class="col_heading level0 col1" >x_2</th>        <th class="col_heading level0 col2" >y</th>    </tr></thead><tbody>
                        <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row0" class="row_heading level0 row0" >0</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row0_col0" class="data row0 col0" >10</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row0_col1" class="data row0 col1" >1</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row0_col2" class="data row0 col2" >10</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row1" class="row_heading level0 row1" >1</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row1_col0" class="data row1 col0" >10</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row1_col1" class="data row1 col1" >2</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row1_col2" class="data row1 col2" >100</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row2" class="row_heading level0 row2" >2</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row2_col0" class="data row2 col0" >10</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row2_col1" class="data row2 col1" >3</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row2_col2" class="data row2 col2" >1000</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row3" class="row_heading level0 row3" >3</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row3_col0" class="data row3 col0" >20</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row3_col1" class="data row3 col1" >1</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row3_col2" class="data row3 col2" >20</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row4" class="row_heading level0 row4" >4</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row4_col0" class="data row4 col0" >20</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row4_col1" class="data row4 col1" >2</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row4_col2" class="data row4 col2" >400</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row5" class="row_heading level0 row5" >5</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row5_col0" class="data row5 col0" >20</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row5_col1" class="data row5 col1" >3</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row5_col2" class="data row5 col2" >8000</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row6" class="row_heading level0 row6" >6</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row6_col0" class="data row6 col0" >30</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row6_col1" class="data row6 col1" >1</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row6_col2" class="data row6 col2" >30</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row7" class="row_heading level0 row7" >7</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row7_col0" class="data row7 col0" >30</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row7_col1" class="data row7 col1" >2</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row7_col2" class="data row7 col2" >900</td>
                    </tr>
                    <tr>
                                <th id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620level0_row8" class="row_heading level0 row8" >8</th>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row8_col0" class="data row8 col0" >30</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row8_col1" class="data row8 col1" >3</td>
                                <td id="T_9be0c2be_53d1_11ea_ab53_000d3a7b7620row8_col2" class="data row8 col2" >27000</td>
                    </tr>
            </tbody></table>
        <br />
        <br />

We can plot the result as well with a hex-bin plot.



.. code-block:: default


    df.plot.hexbin(x='x_1', y='x_2', C='y', gridsize=3, cmap='RdYlGn', sharex=False)





.. image:: /auto_examples/images/sphx_glr_sensitivity_analysis_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.axes._subplots.AxesSubplot object at 0x7f751cc77390>



Using The Sensitivity Library
-----------------------------

The ``sensitivity`` package is designed around making this whole process
easier. It is also able to handle more than two varying inputs with
ease. The basic usage is to construct a dictionary where the keys are
the names of inputs in a function and values are iterables of the values
for that input. Then this dictionary is passed to
``SensitivityAnalyzer`` along with the function. The rest is handled for
you.



.. code-block:: default


    from sensitivity import SensitivityAnalyzer

    sensitivity_dict = {
        'x_1': [10, 20, 30],
        'x_2': [1, 2, 3]
    }

    sa = SensitivityAnalyzer(sensitivity_dict, my_model)









Now that we have created the ``SensitivityAnalyzer`` object, it has
finished the sensitivity analysis. We can view a ``DataFrame`` with the
results at ``.df``:



.. code-block:: default


    sa.df







.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>x_1</th>
              <th>x_2</th>
              <th>Result</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>10</td>
              <td>1</td>
              <td>10</td>
            </tr>
            <tr>
              <th>1</th>
              <td>10</td>
              <td>2</td>
              <td>100</td>
            </tr>
            <tr>
              <th>2</th>
              <td>10</td>
              <td>3</td>
              <td>1000</td>
            </tr>
            <tr>
              <th>3</th>
              <td>20</td>
              <td>1</td>
              <td>20</td>
            </tr>
            <tr>
              <th>4</th>
              <td>20</td>
              <td>2</td>
              <td>400</td>
            </tr>
            <tr>
              <th>5</th>
              <td>20</td>
              <td>3</td>
              <td>8000</td>
            </tr>
            <tr>
              <th>6</th>
              <td>30</td>
              <td>1</td>
              <td>30</td>
            </tr>
            <tr>
              <th>7</th>
              <td>30</td>
              <td>2</td>
              <td>900</td>
            </tr>
            <tr>
              <th>8</th>
              <td>30</td>
              <td>3</td>
              <td>27000</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

We can also get the hex-bin plot and styled DataFrame:



.. code-block:: default


    plot = sa.plot()

    styled = sa.styled_dfs()





.. image:: /auto_examples/images/sphx_glr_sensitivity_analysis_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>




When creating the ``SensitivityAnalyzer`` object, you can pass other
options for formatting the outputs:



.. code-block:: default


    sa = SensitivityAnalyzer(sensitivity_dict, my_model, grid_size=3, reverse_colors=True)
    plot = sa.plot()

    styled = sa.styled_dfs()





.. image:: /auto_examples/images/sphx_glr_sensitivity_analysis_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>




This all works with more than two inputs as well. In that case we will
get multiple pair-wise plots and styled ``DataFrame``\ s:



.. code-block:: default


    def my_model_2(x_1, x_2, x_3):
        return x_1 * x_2 ** x_3

    sensitivity_dict = {
        'x_1': [1, 2, 3],
        'x_2': [4, 5, 6],
        'x_3': [7, 8, 9]
    }

    sa = SensitivityAnalyzer(sensitivity_dict, my_model_2, grid_size=3)

    plot = sa.plot()

    styled_dict = sa.styled_dfs()





.. image:: /auto_examples/images/sphx_glr_sensitivity_analysis_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>




The plot is still a single ``Figure`` object, but the ``styled_dfs``
produces a dictionary where there are more than two inputs. The keys of
the dictionary are a tuple of the column names involved in the
``Styler``, and the values are the ``Styler``\ s.



.. code-block:: default


    styled_dict






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {('x_1', 'x_2'): <pandas.io.formats.style.Styler object at 0x7f750927bb50>, ('x_1', 'x_3'): <pandas.io.formats.style.Styler object at 0x7f750924d310>, ('x_2', 'x_3'): <pandas.io.formats.style.Styler object at 0x7f7508f6a850>}



Adding Additional Styling to Styled ``DataFrames``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It could be desired to pass some number or other formatting to the
styled ``DataFrames``. This can be done with the ``num_fmt`` argument,
either when first creating the ``SensitivityAnalyzer`` or when calling
the ``styled_dfs`` method. Just pass it the string of the number format,
in the same way you would specify the number formatting string for
``df.style.format``.



.. code-block:: default


    styled_dict = sa.styled_dfs(num_fmt='${:,.0f}')



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>
    <IPython.core.display.HTML object>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.657 seconds)


.. _sphx_glr_download_auto_examples_sensitivity_analysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/nickderobertis/sensitivity/gh-pages?urlpath=lab/tree/notebooks/auto_examples/sensitivity_analysis.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: sensitivity_analysis.py <sensitivity_analysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: sensitivity_analysis.ipynb <sensitivity_analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
